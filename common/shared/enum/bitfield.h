#pragma once

#include "macro.h"

///////////////////////////////////////////////////////////////////////////////////
// BITFIELD
///////////////////////////////////////////////////////////////////////////////////

#define CHT_PP_DECLARE_BITFIELD_FORWARDER(NAME_)    \
    CHT_PP_ENUM_DECLARE_BITWISE(NAME_)  \
    CHT_PP_ENUM_DECLARE_IO(NAME_)

#define CHT_PP_DECLARE_BITFIELD_INNER_FORWARDER(NAME_)    \
    CHT_PP_ENUM_INNER_DECLARE_BITWISE(NAME_)  \
    CHT_PP_ENUM_INNER_DECLARE_IO(NAME_)

#define CHT_PP_DECLARE_BITFIELD_GROUP(GROUP_SIZE_, NAME_, GROUP_SEQ_)    \
            BOOST_PP_SEQ_FOR_EACH_I(CHT_PP_DECLARE_BITFIELD_RECORD, NAME_, GROUP_SEQ_)

#define CHT_PP_DECLARE_BITFIELD_RECORD(_1, NAME_, I_, ITEM_)    \
    BOOST_PP_CAT    \
    (   \
        BOOST_PP_COMMA_IF(I_),     \
        utils_type::group_t<1> {  \
            utils_type::record_type     \
            {   \
                ITEM_   \
                BOOST_PP_COMMA()    \
                BOOST_PP_CAT(BOOST_PP_STRINGIZE(ITEM_), sv)   \
                BOOST_PP_COMMA()    \
                BOOST_PP_CAT(BOOST_PP_WSTRINGIZE(ITEM_), sv)   \
            }   \
        }   \
    )

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_DECLARE_BITFIELD_RTTI(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_BEGIN_DECLARE_ENUM(NAME_) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 GROUP_SEQ_, _END)) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 __VA_ARGS__, _END)) \
    CHT_PP_END_DECLARE_ENUM()  \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()

#define CHT_PP_DECLARE_BITFIELD(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_RTTI(NAME_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_DECLARE_BITFIELD_FORWARDER(NAME_)

#define CHT_PP_DECLARE_BITFIELD_INNER(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_RTTI(NAME_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_DECLARE_BITFIELD_INNER_FORWARDER(NAME_)

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_DECLARE_BITFIELD_RTTI_BASE(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_BEGIN_DECLARE_ENUM_BASE(NAME_, BASE_) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 GROUP_SEQ_, _END)) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 __VA_ARGS__, _END)) \
    CHT_PP_END_DECLARE_ENUM()

#define CHT_PP_DECLARE_BITFIELD_BASE(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_RTTI_BASE(NAME_, BASE_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_FORWARDER(NAME_)

#define CHT_PP_DECLARE_BITFIELD_INNER_BASE(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_RTTI_BASE(NAME_, BASE_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_BEGIN_DECLARE_ENUM_META_INNER(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_INNER_FORWARDER(NAME_)

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_ADAPT_BITFILED(NAME_, GROUP_SEQ_) \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_FORWARDER(NAME_)

///////////////////////////////////////////////////////////////////////////////////
// BITFIELD_CLASS
///////////////////////////////////////////////////////////////////////////////////

#define CHT_PP_DECLARE_BITFIELD_CLASS_FORWARDER(NAME_)    \
    CHT_PP_ENUM_DECLARE_BITWISE(NAME_)  \
    CHT_PP_ENUM_DECLARE_EQUALITY_COMPARABLE(NAME_)   \
    CHT_PP_ENUM_DECLARE_IO(NAME_)

#define CHT_PP_DECLARE_BITFIELD_CLASS_INNER_FORWARDER(NAME_)    \
    CHT_PP_ENUM_INNER_DECLARE_BITWISE(NAME_)  \
    CHT_PP_ENUM_INNER_DECLARE_TOTALLY_ORDERED(NAME_)   \
    CHT_PP_ENUM_INNER_DECLARE_IO(NAME_)

#define CHT_PP_DECLARE_BITFIELD_CLASS_GROUP(GROUP_SIZE_, NAME_, GROUP_SEQ_)    \
            BOOST_PP_SEQ_FOR_EACH_I(CHT_PP_DECLARE_BITFIELD_CLASS_RECORD, NAME_, GROUP_SEQ_)

#define CHT_PP_DECLARE_BITFIELD_CLASS_RECORD(_1, NAME_, I_, ITEM_)    \
    BOOST_PP_CAT    \
    (   \
        BOOST_PP_COMMA_IF(I_),     \
        utils_type::group_t<1> {  \
            utils_type::record_type     \
            {   \
                BOOST_PP_CAT(BOOST_PP_CAT(NAME_, ::), ITEM_)    \
                BOOST_PP_COMMA()    \
                BOOST_PP_CAT(BOOST_PP_STRINGIZE(ITEM_), sv)   \
                BOOST_PP_COMMA()    \
                BOOST_PP_CAT(BOOST_PP_WSTRINGIZE(ITEM_), sv)   \
            }   \
        }   \
    )

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_DECLARE_BITFIELD_CLASS_RTTI(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_BEGIN_DECLARE_ENUM_CLASS(NAME_) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 GROUP_SEQ_, _END)) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 __VA_ARGS__, _END)) \
    CHT_PP_END_DECLARE_ENUM()  \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_CLASS_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()

#define CHT_PP_DECLARE_BITFIELD_CLASS(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_CLASS_RTTI(NAME_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_DECLARE_BITFIELD_CLASS_FORWARDER(NAME_)

#define CHT_PP_DECLARE_BITFIELD_CLASS_INNER(NAME_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_CLASS_RTTI(NAME_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_DECLARE_BITFIELD_CLASS_INNER_FORWARDER(NAME_)

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_DECLARE_BITFIELD_CLASS_BASE_RTTI(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_BEGIN_DECLARE_ENUM_CLASS_BASE(NAME_, BASE_) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 GROUP_SEQ_, _END)) \
        DECLARE_ENUM_GROUP(BOOST_PP_CAT(ADD_ENUM_ELEM_1 __VA_ARGS__, _END)) \
    CHT_PP_END_DECLARE_ENUM()

#define CHT_PP_DECLARE_BITFIELD_CLASS_BASE(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_CLASS_BASE_RTTI(NAME_, BASE_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_CLASS_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_CLASS_FORWARDER(NAME_)

#define CHT_PP_DECLARE_BITFIELD_CLASS_INNER_BASE(NAME_, BASE_, GROUP_SEQ_, ...) \
    CHT_PP_DECLARE_BITFIELD_CLASS_BASE_RTTI(NAME_, BASE_, GROUP_SEQ_, __VA_ARGS__) \
    CHT_PP_BEGIN_DECLARE_ENUM_META_INNER(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_CLASS_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_CLASS_INNER_FORWARDER(NAME_)

////////////////////////////////////////////////////////////////////////////////
#define CHT_PP_ADAPT_BITFILED_CLASS(NAME_, GROUP_SEQ_) \
    CHT_PP_BEGIN_DECLARE_ENUM_META(NAME_, bitfield) \
        CHT_PP_DECLARE_BITFIELD_CLASS_GROUP(BOOST_PP_SEQ_SIZE(GROUP_SEQ_), NAME_, GROUP_SEQ_) \
    CHT_PP_END_DECLARE_ENUM_META()  \
    CHT_PP_DECLARE_BITFIELD_CLASS_FORWARDER(NAME_)

#include "op.h"
#include "traits.h"